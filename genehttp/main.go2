package main

import (
	//"fmt"
	"encoding/json"
	"io"
	"net/http"
	"strings"
    "log"
)

type Decoder[type Src, Dest] interface {
	Decode(src Src, dest Dest) error
}

type jsonDec struct{}

func (d jsonDec) Decode(r io.ReadCloser, v interface{}) error {
	return json.NewDecoder(r).Decode(v)
}

type Handler[type Src, Dest] struct {
	Method  string
	Decoder Decoder[Src, Dest]
}

func Handle[type Req, Res](method string, f func(Req) (Res, error)) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method != method {
			http.Error(w, "bad method", http.StatusMethodNotAllowed)
			return

		}

		var req Req

		err := DecodeRequest(r, &req)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

        res, err := f(req)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

        err = EncodeResponse(w, res)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
	}
}

type UppercaseRequest struct {
	Text string
}

type UppercaseResponse struct {
	Text string
}

func Uppercase(req UppercaseRequest) (UppercaseResponse, error) {
	upped := strings.ToUpper(req.Text)
	return UppercaseResponse{
		Text: upped,
	}, nil
}

func DecodeRequest[type Req](r *http.Request, req *Req) error {
	// I want to decode the body
	err := json.NewDecoder(r.Body).Decode(&req)
	if err != nil {
		return err
	}
	defer r.Body.Close()

	return nil
}

func EncodeResponse[type Res](w io.Writer, res Res) (error) {
    return json.NewEncoder(w).Encode(res)
}

func main() {
	http.HandleFunc("/uppercase", Handle(http.MethodPost, Uppercase))

    log.Println("listening on :8000")
    log.Fatal(http.ListenAndServe(":8000", nil))
}
