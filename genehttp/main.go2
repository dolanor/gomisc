package main

import (
	"encoding/json"
	"io"
	"net/http"
    "log"
)

func Handle[Req, Res any](method string, f func(Req) (Res, error)) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method != method {
			http.Error(w, "bad method", http.StatusMethodNotAllowed)
			return

		}

		var req Req

		err, closeFunc := DecodeRequestBody(r, &req)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		defer closeFunc()

        	res, err := f(req)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		err = EncodeResponse(w, res)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
	}
}

func DecodeRequestBody[Req any](r *http.Request, req *Req) (err error, closeFunc func() error) {
	// I want to decode the body
	err = json.NewDecoder(r.Body).Decode(&req)
	if err != nil {
		return err
	}
	return nil, r.Body.Close
}

func EncodeResponse[Res any](w io.Writer, res Res) (error) {
    return json.NewEncoder(w).Encode(res)
}

func main() {
	http.HandleFunc("/uppercase", Handle(http.MethodPost, UpperCase))
	http.HandleFunc("/snakecase", Handle(http.MethodPost, SnakeCase))

    log.Println("listening on :8000")
    log.Fatal(http.ListenAndServe(":8000", nil))
}
